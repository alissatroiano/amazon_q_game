{"mappings":"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","sources":["assets/js/earth.js"],"sourcesContent":["// Scene, Camera, Renderer\nlet renderer = new THREE.WebGLRenderer();\nlet scene = new THREE.Scene();\nlet aspect = window.innerWidth / window.innerHeight;\nlet camera = new THREE.PerspectiveCamera(45, aspect, 0.1, 1500);\nlet cameraRotation = 0;\nlet cameraRotationSpeed = 0.001;\nlet cameraAutoRotation = true;\nlet orbitControls = new THREE.OrbitControls(camera);\n\n// Lights\nlet spotLight = new THREE.SpotLight(0xffffff, 1, 0, 10, 2);\n\n// Texture Loader\nlet textureLoader = new THREE.TextureLoader();\n\n// Planet Proto\nlet planetProto = {\n  sphere: function(size) {\n    let sphere = new THREE.SphereGeometry(size, 32, 32);\n    \n    return sphere;\n  },\n  material: function(options) {\n    let material = new THREE.MeshPhongMaterial();\n    if (options) {\n      for (var property in options) {\n        material[property] = options[property];\n      } \n    }\n    \n    return material;\n  },\n  glowMaterial: function(intensity, fade, color) {\n    // Custom glow shader from https://github.com/stemkoski/stemkoski.github.com/tree/master/Three.js\n    let glowMaterial = new THREE.ShaderMaterial({\n      uniforms: { \n        'c': {\n          type: 'f',\n          value: intensity\n        },\n        'p': { \n          type: 'f',\n          value: fade\n        },\n        glowColor: { \n          type: 'c',\n          value: new THREE.Color(color)\n        },\n        viewVector: {\n          type: 'v3',\n          value: camera.position\n        }\n      },\n      vertexShader: `\n        uniform vec3 viewVector;\n        uniform float c;\n        uniform float p;\n        varying float intensity;\n        void main() {\n          vec3 vNormal = normalize( normalMatrix * normal );\n          vec3 vNormel = normalize( normalMatrix * viewVector );\n          intensity = pow( c - dot(vNormal, vNormel), p );\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n      ,\n      fragmentShader: `\n        uniform vec3 glowColor;\n        varying float intensity;\n        void main() \n        {\n          vec3 glow = glowColor * intensity;\n          gl_FragColor = vec4( glow, 1.0 );\n        }`\n      ,\n      side: THREE.BackSide,\n      blending: THREE.AdditiveBlending,\n      transparent: true\n    });\n    \n    return glowMaterial;\n  },\n  texture: function(material, property, uri) {\n    let textureLoader = new THREE.TextureLoader();\n    textureLoader.crossOrigin = true;\n    textureLoader.load(\n      uri,\n      function(texture) {\n        material[property] = texture;\n        material.needsUpdate = true;\n      }\n    );\n  }\n};\n\nlet createPlanet = function(options) {\n  // Create the planet's Surface\n  let surfaceGeometry = planetProto.sphere(options.surface.size);\n  let surfaceMaterial = planetProto.material(options.surface.material);\n  let surface = new THREE.Mesh(surfaceGeometry, surfaceMaterial);\n  \n  // Create the planet's Atmosphere\n  let atmosphereGeometry = planetProto.sphere(options.surface.size + options.atmosphere.size);\n  let atmosphereMaterialDefaults = {\n    side: THREE.DoubleSide,\n    transparent: true\n  }\n  let atmosphereMaterialOptions = Object.assign(atmosphereMaterialDefaults, options.atmosphere.material);\n  let atmosphereMaterial = planetProto.material(atmosphereMaterialOptions);\n  let atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);\n  \n  // Create the planet's Atmospheric glow\n  let atmosphericGlowGeometry = planetProto.sphere(options.surface.size + options.atmosphere.size + options.atmosphere.glow.size);\n  let atmosphericGlowMaterial = planetProto.glowMaterial(options.atmosphere.glow.intensity, options.atmosphere.glow.fade, options.atmosphere.glow.color);\n  let atmosphericGlow = new THREE.Mesh(atmosphericGlowGeometry, atmosphericGlowMaterial);\n  \n  // Nest the planet's Surface and Atmosphere into a planet object\n  let planet = new THREE.Object3D();\n  surface.name = 'surface';\n  atmosphere.name = 'atmosphere';\n  atmosphericGlow.name = 'atmosphericGlow';\n  planet.add(surface);\n  planet.add(atmosphere);\n  planet.add(atmosphericGlow);\n\n  // Load the Surface's textures\n  for (let textureProperty in options.surface.textures) {\n    planetProto.texture(\n      surfaceMaterial,\n      textureProperty,\n      options.surface.textures[textureProperty]\n    ); \n  }\n  \n  // Load the Atmosphere's texture\n  for (let textureProperty in options.atmosphere.textures) {\n    planetProto.texture(\n      atmosphereMaterial,\n      textureProperty,\n      options.atmosphere.textures[textureProperty]\n    );\n  }\n  \n  return planet;\n};\n\nlet earth = createPlanet({\n  surface: {\n    size: 0.5,\n    material: {\n      bumpScale: 0.05,\n      specular: new THREE.Color('grey'),\n      shininess: 10\n    },\n    textures: {\n      map: 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/141228/earthmap1k.jpg',\n      bumpMap: 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/141228/earthbump1k.jpg',\n      specularMap: 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/141228/earthspec1k.jpg'\n    }\n  },\n  atmosphere: {\n    size: 0.003,\n    material: {\n      opacity: 0.8\n    },\n    textures: {\n      map: 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/141228/earthcloudmap.jpg',\n      alphaMap: 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/141228/earthcloudmaptrans.jpg'\n    },\n    glow: {\n      size: 0.02,\n      intensity: 0.7,\n      fade: 7,\n      color: 0x93cfef\n    }\n  },\n});\n\n// Marker Proto\nlet markerProto = {\n  latLongToVector3: function latLongToVector3(latitude, longitude, radius, height) {\n    var phi = (latitude)*Math.PI/180;\n    var theta = (longitude-180)*Math.PI/180;\n\n    var x = -(radius+height) * Math.cos(phi) * Math.cos(theta);\n    var y = (radius+height) * Math.sin(phi);\n    var z = (radius+height) * Math.cos(phi) * Math.sin(theta);\n\n    return new THREE.Vector3(x,y,z);\n  },\n  marker: function marker(size, color, vector3Position) {\n    let markerGeometry = new THREE.SphereGeometry(size);\n    let markerMaterial = new THREE.MeshLambertMaterial({\n      color: color\n    });\n    let markerMesh = new THREE.Mesh(markerGeometry, markerMaterial);\n    markerMesh.position.copy(vector3Position);\n    \n    return markerMesh;\n  }\n}\n\n// Place Marker\nlet placeMarker = function(object, options) {\n  let position = markerProto.latLongToVector3(options.latitude, options.longitude, options.radius, options.height);\n  let marker = markerProto.marker(options.size, options.color, position);\n  object.add(marker);\n}\n\n// Place Marker At Address\nlet placeMarkerAtAddress = function(address, color) {\n  let encodedLocation = address.replace(/\\s/g, '+');\n  let httpRequest = new XMLHttpRequest();\n  \n  httpRequest.open('GET', 'https://maps.googleapis.com/maps/api/geocode/json?address=' + encodedLocation);\n  httpRequest.send(null);\n  httpRequest.onreadystatechange = function() {\n    if (httpRequest.readyState == 4 && httpRequest.status == 200) {\n      let result = JSON.parse(httpRequest.responseText);\n      \n      if (result.results.length > 0) {\n        let latitude = result.results[0].geometry.location.lat;\n        let longitude = result.results[0].geometry.location.lng;\n\n        placeMarker(earth.getObjectByName('surface'),{\n          latitude: latitude,\n          longitude: longitude,\n          radius: 0.5,\n          height: 0,\n          size: 0.01,\n          color: color,\n        });\n      }\n    }\n  };\n}\n\n// Galaxy\nlet galaxyGeometry = new THREE.SphereGeometry(100, 32, 32);\nlet galaxyMaterial = new THREE.MeshBasicMaterial({\n  side: THREE.BackSide\n});\nlet galaxy = new THREE.Mesh(galaxyGeometry, galaxyMaterial);\n\n// Load Galaxy Textures\ntextureLoader.crossOrigin = true;\ntextureLoader.load(\n  'https://s3-us-west-2.amazonaws.com/s.cdpn.io/141228/starfield.png',\n  function(texture) {\n    galaxyMaterial.map = texture;\n    scene.add(galaxy);\n  }\n);\n\n// Scene, Camera, Renderer Configuration\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\ncamera.position.set(1,1,1);\norbitControls.enabled = !cameraAutoRotation;\n\nscene.add(camera);\nscene.add(spotLight);\nscene.add(earth);\n\n// Light Configurations\nspotLight.position.set(2, 0, 1);\n\n// Mesh Configurations\nearth.receiveShadow = true;\nearth.castShadow = true;\nearth.getObjectByName('surface').geometry.center();\n\n// On window resize, adjust camera aspect ratio and renderer size\nwindow.addEventListener('resize', function() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n});\n\n// Main render function\nlet render = function() {\n  earth.getObjectByName('surface').rotation.y += 1/32 * 0.01;\n  earth.getObjectByName('atmosphere').rotation.y += 1/16 * 0.01;\n  if (cameraAutoRotation) {\n    cameraRotation += cameraRotationSpeed;\n    camera.position.y = 0;\n    camera.position.x = 2 * Math.sin(cameraRotation);\n    camera.position.z = 2 * Math.cos(cameraRotation);\n    camera.lookAt(earth.position);\n  }\n  requestAnimationFrame(render);\n  renderer.render(scene, camera);\n};\n\nrender();\n\n// dat.gui\nvar gui = new dat.GUI();\nvar guiCamera = gui.addFolder('Camera');\nvar guiSurface = gui.addFolder('Surface');\nvar guiMarkers = guiSurface.addFolder('Markers');\nvar guiAtmosphere = gui.addFolder('Atmosphere');\nvar guiAtmosphericGlow = guiAtmosphere.addFolder('Glow');\n\n// dat.gui controls object\nvar cameraControls = new function() {\n  this.speed = cameraRotationSpeed;\n  this.orbitControls = !cameraAutoRotation;\n}\n\nvar surfaceControls = new function() {\n  this.rotation = 0;\n  this.bumpScale = 0.05;\n  this.shininess = 10;\n}\n\nvar markersControls = new function() {\n  this.address = '';\n  this.color = 0xff0000;\n  this.placeMarker= function() {\n    placeMarkerAtAddress(this.address, this.color);\n  }\n}\n\nvar atmosphereControls = new function() {\n  this.opacity = 0.8;\n}\n\nvar atmosphericGlowControls = new function() {\n  this.intensity = 0.7;\n  this.fade = 7;\n  this.color = 0x93cfef;\n}\n\n// dat.gui controls\nguiCamera.add(cameraControls, 'speed', 0, 0.1).step(0.001).onChange(function(value) {\n  cameraRotationSpeed = value;\n});\nguiCamera.add(cameraControls, 'orbitControls').onChange(function(value) {\n  cameraAutoRotation = !value;\n  orbitControls.enabled = value;\n});\n\nguiSurface.add(surfaceControls, 'rotation', 0, 6).onChange(function(value) {\n  earth.getObjectByName('surface').rotation.y = value;\n});\nguiSurface.add(surfaceControls, 'bumpScale', 0, 1).step(0.01).onChange(function(value) {\n  earth.getObjectByName('surface').material.bumpScale = value;\n});\nguiSurface.add(surfaceControls, 'shininess', 0, 30).onChange(function(value) {\n  earth.getObjectByName('surface').material.shininess = value;\n});\n\nguiMarkers.add(markersControls, 'address');\nguiMarkers.addColor(markersControls, 'color');\nguiMarkers.add(markersControls, 'placeMarker');\n\nguiAtmosphere.add(atmosphereControls, 'opacity', 0, 1).onChange(function(value) {\n  earth.getObjectByName('atmosphere').material.opacity = value;\n});\n\nguiAtmosphericGlow.add(atmosphericGlowControls, 'intensity', 0, 1).onChange(function(value) {\n  earth.getObjectByName('atmosphericGlow').material.uniforms['c'].value = value;\n});\nguiAtmosphericGlow.add(atmosphericGlowControls, 'fade', 0, 50).onChange(function(value) {\n  earth.getObjectByName('atmosphericGlow').material.uniforms['p'].value = value;\n});\nguiAtmosphericGlow.addColor(atmosphericGlowControls, 'color').onChange(function(value) {\n  earth.getObjectByName('atmosphericGlow').material.uniforms.glowColor.value.setHex(value);\n});"],"names":[],"version":3,"file":"index.9415f697.js.map","sourceRoot":"/__parcel_source_root/"}